[["index.html", "1 About", " 1 About This is the code to reproduce the figures presented in the CopyKit manuscript - Resolving clonal substructure from single cell genomic data using CopyKit. You can find instructions on how to install CopyKit here: https://github.com/navinlabcode/copykit Files used for this project are deposited to the sequence read archive (SRA) under BioProject PRJNA785341. "],["bl1-and-bl2.html", "2 BL1 and BL2 2.1 BL1 2.2 BL2", " 2 BL1 and BL2 Setup suppressPackageStartupMessages(library(copykit)) library(patchwork) library(rstatix) ## ## Attaching package: &#39;rstatix&#39; ## The following object is masked from &#39;package:IRanges&#39;: ## ## desc ## The following object is masked from &#39;package:stats&#39;: ## ## filter suppressPackageStartupMessages(library(tidyverse)) library(ggrepel) library(ggnewscale) library(janitor) ## ## Attaching package: &#39;janitor&#39; ## The following object is masked from &#39;package:rstatix&#39;: ## ## make_clean_names ## The following objects are masked from &#39;package:stats&#39;: ## ## chisq.test, fisher.test Functions to Calculate Shannon Diversity Indexes shan &lt;- function(data, indices) { data_ind &lt;- data[indices] prop &lt;- janitor::tabyl(data_ind) %&gt;% pull(percent) div &lt;- -sum(prop*log(prop)) return(div) } shan_sample &lt;- function(meta, group) { meta_group &lt;- meta %&gt;% filter(sectors == !!group) group_perc &lt;- janitor::tabyl(as.character(meta_group$subclones)) %&gt;% pull(percent) group_div &lt;- -sum(group_perc*log(group_perc)) # Check for sectors composed of a unique subclone if (group_div == 0) { df &lt;- data.frame(foci = group, div = 0, lci = 0, uci = 0) return(df) } shan_group_boot &lt;- boot::boot( as.character(meta_group$subclones), statistic = shan, R = 2000 ) shan_group_boot_ci &lt;- suppressWarnings(boot::boot.ci(shan_group_boot)) df &lt;- data.frame(foci = group, div = group_div, lci = shan_group_boot_ci$normal[2], uci = shan_group_boot_ci$normal[3]) } 2.1 BL1 2.1.1 Filtering bl1 &lt;- runVarbin(&quot;/mnt/lab/users/dminussi/projects/CopyKit_Manuscript_Code/datasets/BL1/marked_bams/&quot;, remove_Y = T) ## Counting reads for genome hg38 and resolution: 220kb ## 34 bam files had less than 10 mean bincounts and were removed. ## Performing GC correction. ## Smoothing bin counts. ## Running segmentation algorithm: CBS for genome hg38 ## Merging levels. ## Done. # Finding diploid cells and sub-setting the copykit object bl1 &lt;- findAneuploidCells(bl1) ## number of iterations= 28 ## Copykit detected 607 that are possibly euploid cells using a resolution of: 0.069 ## Added information to colData(CopyKit). plotHeatmap(bl1, label = c(&#39;is_aneuploid&#39;), row_split = &#39;is_aneuploid&#39;, n_threads = 50) ## Ordering by consensus requires cluster information. ## Switching to hclust. ## No distance matrix detected in the scCNA object. ## Calculating distance matrix with metric: euclidean ## Using 50 cores. ## Access distance matrix with copykit::distMat() ## Done. ## Plotting Heatmap. bl1 &lt;- bl1[,colData(bl1)$is_aneuploid == TRUE] # Finding low-quality cells bl1 &lt;- findOutliers(bl1) ## Calculating correlation matrix. ## Marked 102 cells as outliers. ## Adding information to metadata. Access with colData(scCNA). ## Done. plotHeatmap(bl1, label = c(&#39;outlier&#39;), row_split = &#39;outlier&#39;, n_threads = 50) ## Ordering by consensus requires cluster information. ## Switching to hclust. ## No distance matrix detected in the scCNA object. ## Calculating distance matrix with metric: euclidean ## Using 50 cores. ## Access distance matrix with copykit::distMat() ## Done. ## Plotting Heatmap. # obtaining metrics and plotting bl1 &lt;- runMetrics(bl1) ## Calculating overdispersion. ## Warning in selectChildren(jobs, timeout): error &#39;No child processes&#39; in select ## Counting breakpoints. ## Done. bl1_p_metrics &lt;- plotMetrics( bl1, metric = c( &quot;reads_total&quot;, &quot;percentage_duplicates&quot;, &quot;overdispersion&quot;, &quot;breakpoint_count&quot; ), label = &#39;outlier&#39;, dodge.width = 0.8, ncol = 2 ) + scale_fill_manual(values = c(&quot;TRUE&quot; = &quot;#DA614D&quot;, &quot;FALSE&quot; = &quot;#5F917A&quot;)) ## Coloring by: outlier ## Scale for &#39;fill&#39; is already present. Adding another scale for &#39;fill&#39;, which will replace the existing scale. bl1_p_metrics # calculating averages from the colData information and statistics bl1_metrics &lt;- as.data.frame(colData(bl1)) bl1_metrics %&gt;% summarise(reads_total_mean = mean(reads_total), reads_total_sd = sd(reads_total), percent_dup_mean = mean(percentage_duplicates), percent_dup_sd = sd(percentage_duplicates) ) ## reads_total_mean reads_total_sd percent_dup_mean percent_dup_sd ## 1 1035783 246883 0.08147598 0.009734118 bl1_metrics %&gt;% as.data.frame() %&gt;% rstatix::kruskal_test(overdispersion ~ outlier) ## # A tibble: 1 × 6 ## .y. n statistic df p method ## * &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 overdispersion 895 3.95 1 0.047 Kruskal-Wallis bl1_metrics %&gt;% as.data.frame() %&gt;% rstatix::kruskal_test(breakpoint_count ~ outlier) ## # A tibble: 1 × 6 ## .y. n statistic df p method ## * &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 breakpoint_count 895 63.2 1 1.87e-15 Kruskal-Wallis # removing low-quality cells bl1 &lt;- bl1[,colData(bl1)$outlier == FALSE] 2.1.2 UMAP and clustering # Running UMAP and storing into the copykit object bl1 &lt;- runUmap(bl1) ## Using assay: logr ## Embedding data with UMAP. Using seed 17 ## Access reduced dimensions slot with: reducedDim(scCNA, &#39;umap&#39;). ## Done. # Grid Search of Jaccard Similarity (cluster stability) bl1 &lt;- findSuggestedK(bl1) ## Calculating jaccard similarity for k range: 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ## ## Suggested k = 10 with median jaccard similarity of: 1 bl1_primary_suggestedK_p &lt;- plotSuggestedK(bl1) bl1_primary_suggestedK_p # Finding clusters using the suggested k value as per default settings, # can be changed with the argument k_subclones bl1 &lt;- findClusters(bl1) ## Using suggested k_subclones = 10 ## Finding clusters, using method: hdbscan ## Found 4 subclones. ## Done. # Plotting UMAP colored by subclones bl1_umap_p &lt;- plotUmap(bl1, label = &#39;subclones&#39;) ## Plotting Umap. ## Coloring by: subclones. bl1_umap_p # Calculating consensus matrix and consensus phylo, # this will be used by copykit to order the subclones on the heatmap bl1 &lt;- calcConsensus(bl1) bl1 &lt;- runConsensusPhylo(bl1) 2.1.3 Subclones Heatmap # Plotting copy number heatmap and annotating with subclones plotHeatmap(bl1, label = c(&#39;subclones&#39;)) ## Plotting Heatmap. # Adding macro-spatial information from file names to colData # and renaming to (S)ectors colData(bl1)$sectors &lt;- stringr::str_extract(colData(bl1)$sample, &quot;(L[0-9]+L[0-9]+|L[0-9]+)&quot;) colData(bl1)$sectors &lt;- stringr::str_replace_all(colData(bl1)$sectors, &quot;L&quot;, &quot;S&quot;) # Plotting the UMAP colored by sectors bl1_umap_sectors_p &lt;- plotUmap(bl1, label = &#39;sectors&#39;) ## Plotting Umap. ## Coloring by: sectors. bl1_umap_sectors_p # Creating pie charts plots of the proportions of clones on each sector bl1_focis &lt;- unique(colData(bl1)$sectors) bl1_foci_pies &lt;- list() for (i in seq_along(bl1_focis)) { df &lt;- as.data.frame(colData(bl1)) %&gt;% dplyr::filter(sectors == bl1_focis[i]) bl1_foci_pies[[i]] &lt;- ggplot(df) + geom_bar(aes(x = &quot;&quot;, y = sectors, fill = subclones), stat = &#39;identity&#39;) + theme_void() + scale_fill_manual(values = subclones_pal(), limits = force) + coord_polar(theta = &quot;y&quot;) + ggtitle(bl1_focis[i]) } wrap_plots(bl1_foci_pies) # Setting up a theme for the next plot my_theme &lt;- list( ggplot2::theme( axis.title.x = element_text(colour = &quot;gray28&quot;, size = 20), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.y = element_text(colour = &quot;gray28&quot;, size = 20), axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.line = element_blank(), legend.text = element_text(size = 14), panel.border = element_rect(fill = NA, color = &#39;black&#39;) ), xlab(&quot;umap1&quot;), ylab(&quot;umap2&quot;) ) # Plotting the UMAP colored by sector and using ggrepel to label the subclones bl1_lfoci_umap &lt;- as.data.frame(reducedDim(bl1, &#39;umap&#39;)) bl1_lfoci_umap$sectors &lt;- colData(bl1)$sectors bl1_lfoci_umap$subclones &lt;- as.character(colData(bl1)$subclones) # Avoiding overplotting of text bl1_lfoci_umap$subclones &lt;- ifelse(!duplicated(bl1_lfoci_umap$subclones), bl1_lfoci_umap$subclones, &quot;&quot;) bl1_lfoci_umap_p &lt;- ggplot(bl1_lfoci_umap, aes(V1, V2, label = subclones)) + geom_point(aes(fill = sectors), shape = 21, stroke = 0.1, size = 2.5) + ggnewscale::new_scale_fill() + geom_text_repel(aes(color = subclones), min.segment.length = 0, box.padding = 0.01, size = 4, max.overlaps = Inf, na.rm = T) + scale_color_manual(values = subclones_pal(), limits = force) + theme_classic() + my_theme bl1_lfoci_umap_p # Plotting consensus heatmap with a frequency annotation of sectors by # subclone and annotating genes of interest plotHeatmap(bl1, label = &#39;subclones&#39;, consensus = T, group = &#39;sectors&#39;, genes = c( &quot;FHIT&quot;, &quot;CUX1&quot;, &quot;WWOX&quot;, &quot;FOXO1&quot;, &quot;APC&quot;, &quot;BCL2&quot;, &quot;KRAS&quot;, &quot;PGR&quot;, &quot;PDGFRA&quot;, &quot;ROS1&quot;, &quot;PTPN11&quot;, &quot;CCND1&quot;, &quot;BTG1&quot;, &quot;FGFR3&quot;, &quot;PTEN&quot;, &quot;FGFR2&quot; )) ## Plotting Heatmap. # Calculating Diversity Indexes by sector bl1_meta &lt;- colData(bl1) bl1_meta &lt;- as.data.frame(bl1_meta) bl1_meta &lt;- bl1_meta[c(&#39;subclones&#39;, &#39;sectors&#39;)] bl1_L1_div &lt;- shan_sample(bl1_meta, &quot;S1&quot;) bl1_L2_div &lt;- shan_sample(bl1_meta, &quot;S2&quot;) bl1_L3_div &lt;- shan_sample(bl1_meta, &quot;S3&quot;) bl1_L4L5_div &lt;- shan_sample(bl1_meta, &quot;S4S5&quot;) bl1_L6L7_div &lt;- shan_sample(bl1_meta, &quot;S6S7&quot;) bl1_L8L9_div &lt;- shan_sample(bl1_meta, &quot;S8S9&quot;) bl1_div &lt;- bind_rows( bl1_L1_div, bl1_L2_div, bl1_L3_div, bl1_L4L5_div, bl1_L6L7_div, bl1_L8L9_div ) # Plotting Shannon Diversity Index bl1_div_p &lt;- bl1_div %&gt;% ggplot() + geom_errorbar(aes( x = fct_reorder(foci, div), ymin = lci, ymax = uci ), width = .1, size = 1) + geom_point(aes( x = fct_reorder(foci, div), y = div, color = foci ), size = 5) + cowplot::theme_cowplot() + theme(legend.position = &quot;none&quot;, axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1 )) + scale_y_continuous(breaks = scales::pretty_breaks(n = 12)) + ylab(&quot;shannon diversity index&quot;) + xlab(&quot;&quot;) + coord_flip() bl1_div_p 2.2 BL2 2.2.1 Filtering bl2 &lt;- runVarbin(&quot;/mnt/lab/users/dminussi/projects/CopyKit_Manuscript_Code/datasets/BL2/marked_bams/&quot;, remove_Y = T) ## Counting reads for genome hg38 and resolution: 220kb ## 61 bam files had less than 10 mean bincounts and were removed. ## Performing GC correction. ## Smoothing bin counts. ## Running segmentation algorithm: CBS for genome hg38 ## Merging levels. ## Done. # Finding diploid cells and sub-setting the copykit object bl2 &lt;- findAneuploidCells(bl2) ## number of iterations= 24 ## Copykit detected 100 that are possibly euploid cells using a resolution of: 0.068 ## Added information to colData(CopyKit). plotHeatmap(bl2, label = c(&#39;is_aneuploid&#39;), row_split = &#39;is_aneuploid&#39;, n_threads = 50) ## Ordering by consensus requires cluster information. ## Switching to hclust. ## No distance matrix detected in the scCNA object. ## Calculating distance matrix with metric: euclidean ## Using 50 cores. ## Access distance matrix with copykit::distMat() ## Done. ## Plotting Heatmap. bl2 &lt;- bl2[,colData(bl2)$is_aneuploid == TRUE] # Finding low-quality cells bl2 &lt;- findOutliers(bl2) ## Calculating correlation matrix. ## Marked 108 cells as outliers. ## Adding information to metadata. Access with colData(scCNA). ## Done. plotHeatmap(bl2, label = c(&#39;outlier&#39;), row_split = &#39;outlier&#39;, n_threads = 50) ## Ordering by consensus requires cluster information. ## Switching to hclust. ## No distance matrix detected in the scCNA object. ## Calculating distance matrix with metric: euclidean ## Using 50 cores. ## Access distance matrix with copykit::distMat() ## Done. ## Plotting Heatmap. # obtaining metrics and plotting bl2 &lt;- runMetrics(bl2) ## Calculating overdispersion. ## Counting breakpoints. ## Done. bl2_p_metrics &lt;- plotMetrics( bl2, metric = c( &quot;reads_total&quot;, &quot;percentage_duplicates&quot;, &quot;overdispersion&quot;, &quot;breakpoint_count&quot; ), label = &#39;outlier&#39;, dodge.width = 0.8, ncol = 2 ) + scale_fill_manual(values = c(&quot;TRUE&quot; = &quot;#DA614D&quot;, &quot;FALSE&quot; = &quot;#5F917A&quot;)) ## Coloring by: outlier ## Scale for &#39;fill&#39; is already present. Adding another scale for &#39;fill&#39;, which will replace the existing scale. bl2_p_metrics # calculating averages from the colData information and statistics bl2_metrics &lt;- as.data.frame(colData(bl2)) bl2_metrics %&gt;% summarise(reads_total_mean = mean(reads_total), reads_total_sd = sd(reads_total), percent_dup_mean = mean(percentage_duplicates), percent_dup_sd = sd(percentage_duplicates) ) ## reads_total_mean reads_total_sd percent_dup_mean percent_dup_sd ## 1 975057.5 303911.9 0.08932727 0.01065848 bl2_metrics %&gt;% as.data.frame() %&gt;% rstatix::kruskal_test(overdispersion ~ outlier) ## # A tibble: 1 × 6 ## .y. n statistic df p method ## * &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 overdispersion 1375 32.9 1 0.00000000978 Kruskal-Wallis bl2_metrics %&gt;% as.data.frame() %&gt;% rstatix::kruskal_test(breakpoint_count ~ outlier) ## # A tibble: 1 × 6 ## .y. n statistic df p method ## * &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 breakpoint_count 1375 0.928 1 0.335 Kruskal-Wallis # removing low-quality cells bl2 &lt;- bl2[,colData(bl2)$outlier == FALSE] 2.2.2 UMAP and clustering # Running UMAP and storing into the copykit object bl2 &lt;- runUmap(bl2) ## Using assay: logr ## Embedding data with UMAP. Using seed 17 ## Access reduced dimensions slot with: reducedDim(scCNA, &#39;umap&#39;). ## Done. # Grid Search of Jaccard Similarity (cluster stability) bl2 &lt;- findSuggestedK(bl2) ## Calculating jaccard similarity for k range: 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ## ## Suggested k = 11 with median jaccard similarity of: 0.928 bl2_primary_suggestedK_p &lt;- plotSuggestedK(bl2) bl2_primary_suggestedK_p # Finding clusters using the suggested k value as per default settings, # can be changed with the argument k_subclones bl2 &lt;- findClusters(bl2) ## Using suggested k_subclones = 11 ## Finding clusters, using method: hdbscan ## Found 62 outliers cells (group &#39;c0&#39;) ## Found 19 subclones. ## Done. # HDBSCAN is an outlier aware clustering algorithm # in this analysis all cells marked as outliers (c0) from hdbscan are excluded. bl2 &lt;- bl2[,colData(bl2)$subclones != &#39;c0&#39;] # Plotting UMAP colored by subclones bl2_umap_p &lt;- plotUmap(bl2, label = &#39;subclones&#39;) ## Plotting Umap. ## Coloring by: subclones. bl2_umap_p # Calculating consensus matrix and consensus phylo, # this will be used by copykit to order the subclones on the heatmap bl2 &lt;- calcConsensus(bl2) bl2 &lt;- runConsensusPhylo(bl2) 2.2.3 Subclones Heatmap # Plotting copy number heatmap and annotating with subclones plotHeatmap(bl2, label = c(&#39;subclones&#39;)) ## Plotting Heatmap. # Adding macro-spatial information from file names to colData # and renaming to (S)ectors colData(bl2)$sectors &lt;- stringr::str_extract(colData(bl2)$sample, &quot;L[0-9]+&quot;) colData(bl2)$sectors &lt;- stringr::str_replace(colData(bl2)$sectors, &quot;L&quot;, &quot;S&quot;) # Plotting the UMAP colored by sectors bl2_umap_sectors_p &lt;- plotUmap(bl2, label = &#39;sectors&#39;) ## Plotting Umap. ## Coloring by: sectors. bl2_umap_sectors_p # Creating pie charts plots of the proportions of clones on each sector bl2_focis &lt;- unique(colData(bl2)$sectors) bl2_foci_pies &lt;- list() for (i in seq_along(bl2_focis)) { df &lt;- as.data.frame(colData(bl2)) %&gt;% dplyr::filter(sectors == bl2_focis[i]) bl2_foci_pies[[i]] &lt;- ggplot(df) + geom_bar(aes(x = &quot;&quot;, y = sectors, fill = subclones), stat = &#39;identity&#39;) + theme_void() + scale_fill_manual(values = subclones_pal(), limits = force) + coord_polar(theta = &quot;y&quot;) + ggtitle(bl2_focis[i]) } wrap_plots(bl2_foci_pies) # Setting up a theme for the next plot my_theme &lt;- list( ggplot2::theme( axis.title.x = element_text(colour = &quot;gray28&quot;, size = 20), axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.y = element_text(colour = &quot;gray28&quot;, size = 20), axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.line = element_blank(), legend.text = element_text(size = 14), panel.border = element_rect(fill = NA, color = &#39;black&#39;) ), xlab(&quot;umap1&quot;), ylab(&quot;umap2&quot;) ) # Plotting the UMAP colored by sector and using ggrepel to label the subclones bl2_lfoci_umap &lt;- as.data.frame(reducedDim(bl2, &#39;umap&#39;)) bl2_lfoci_umap$sectors &lt;- colData(bl2)$sectors bl2_lfoci_umap$subclones &lt;- as.character(colData(bl2)$subclones) # Avoiding overplotting of text bl2_lfoci_umap$subclones &lt;- ifelse(!duplicated(bl2_lfoci_umap$subclones), bl2_lfoci_umap$subclones, &quot;&quot;) bl2_lfoci_umap_p &lt;- ggplot(bl2_lfoci_umap, aes(V1, V2, label = subclones)) + geom_point(aes(fill = sectors), shape = 21, stroke = 0.1, size = 2.5) + ggnewscale::new_scale_fill() + geom_text_repel(aes(color = subclones), min.segment.length = 0, box.padding = 0.01, size = 4, max.overlaps = Inf, na.rm = T) + scale_color_manual(values = subclones_pal(), limits = force) + theme_classic() + my_theme bl2_lfoci_umap_p # Plotting consensus heatmap with a frequency annotation of sectors # by subclone and annotating genes of interest plotHeatmap(bl2, label = &#39;subclones&#39;, consensus = T, group = &#39;sectors&#39;, genes = c( &quot;CCND1&quot;, &quot;TP53&quot;, &quot;GATA1&quot;, &quot;SOX2&quot;, &quot;ERBB2&quot;, &quot;MYC&quot;, &quot;RB1&quot;, &quot;PIK3CA&quot;, &quot;MMP3&quot;, &quot;BRCA1&quot;, &quot;BRCA2&quot;, &quot;FHIT&quot; )) ## Plotting Heatmap. # Calculating Diversity Indexes by sector bl2_meta &lt;- colData(bl2) bl2_meta &lt;- as.data.frame(bl2_meta) bl2_meta &lt;- bl2_meta[c(&#39;subclones&#39;, &#39;sectors&#39;)] bl2_L1_div &lt;- shan_sample(bl2_meta, &quot;S1&quot;) bl2_L4_div &lt;- shan_sample(bl2_meta, &quot;S4&quot;) bl2_L5_div &lt;- shan_sample(bl2_meta, &quot;S5&quot;) bl2_L6_div &lt;- shan_sample(bl2_meta, &quot;S6&quot;) bl2_L7_div &lt;- shan_sample(bl2_meta, &quot;S7&quot;) bl2_div &lt;- bind_rows( bl2_L1_div, bl2_L4_div, bl2_L5_div, bl2_L6_div, bl2_L7_div ) # Plotting Shannon Diversity Index bl2_div_p &lt;- bl2_div %&gt;% ggplot() + geom_errorbar(aes( x = fct_reorder(foci, div), ymin = lci, ymax = uci ), width = .1, size = 1) + geom_point(aes( x = fct_reorder(foci, div), y = div, color = foci ), size = 5) + cowplot::theme_cowplot() + theme(legend.position = &quot;none&quot;, axis.text.x = element_text( angle = 90, vjust = 0.5, hjust = 1 )) + scale_y_continuous(breaks = scales::pretty_breaks(n = 12)) + ylab(&quot;shannon diversity index&quot;) + xlab(&quot;&quot;) + coord_flip() bl2_div_p The following code analysis the breast metastatic sample with metastasis to the liver and to the pleural effusion. This works as an example on how to employ CopyKit for the analysis of multiple datasets. "],["bm1.html", "3 BM1 3.1 Reading datasets 3.2 Running UMAP and Clustering 3.3 Consensus tree", " 3 BM1 3.1 Reading datasets # Running data with CopyKit for the primary breast sample bm1_breast &lt;- runVarbin( &quot;/mnt/lab/users/dminussi/projects/CopyKit_Manuscript_Code/datasets/BM1/breast/marked_bams/&quot;, remove_Y = TRUE ) ## Counting reads for genome hg38 and resolution: 220kb ## 326 bam files had less than 10 mean bincounts and were removed. ## Performing GC correction. ## Smoothing bin counts. ## Running segmentation algorithm: CBS for genome hg38 ## Merging levels. ## Done. # Finding diploid and low-quality cells and excluding it from the copykit object bm1_breast &lt;- findOutliers(bm1_breast, resolution = 0.8) ## Calculating correlation matrix. ## Marked 288 cells as outliers. ## Adding information to metadata. Access with colData(scCNA). ## Done. bm1_breast &lt;- findAneuploidCells(bm1_breast) ## number of iterations= 25 ## Copykit detected 83 that are possibly euploid cells using a resolution of: 0.052 ## Added information to colData(CopyKit). bm1_breast &lt;- bm1_breast[, colData(bm1_breast)$outlier == FALSE] bm1_breast &lt;- bm1_breast[, colData(bm1_breast)$is_aneuploid == TRUE] # Adding the tissue information to colData colData(bm1_breast)$timepoint &lt;- &#39;breast&#39; # ~~~~~~~~~~~~~~~~~~~~~~~ # Running data with CopyKit for the liver metastasis sample bm1_liver &lt;- runVarbin( &quot;/mnt/lab/users/dminussi/projects/CopyKit_Manuscript_Code/datasets/BM1/liver/marked_bams/&quot;, remove_Y = TRUE ) ## Counting reads for genome hg38 and resolution: 220kb ## 40 bam files had less than 10 mean bincounts and were removed. ## Performing GC correction. ## Smoothing bin counts. ## Running segmentation algorithm: CBS for genome hg38 ## Merging levels. ## Done. # Finding diploid and low-quality cells and excluding it from the copykit object bm1_liver &lt;- findOutliers(bm1_liver) ## Calculating correlation matrix. ## Marked 295 cells as outliers. ## Adding information to metadata. Access with colData(scCNA). ## Done. bm1_liver &lt;- findAneuploidCells(bm1_liver) ## number of iterations= 15 ## Copykit detected 284 that are possibly euploid cells using a resolution of: 0.051 ## Added information to colData(CopyKit). bm1_liver &lt;- bm1_liver[, colData(bm1_liver)$outlier == FALSE] bm1_liver &lt;- bm1_liver[, colData(bm1_liver)$is_aneuploid == TRUE] # Adding the tissue information to colData colData(bm1_liver)$timepoint &lt;- &#39;liver&#39; # Running data with CopyKit for the pleural effusion metastasis sample bm1_pleural &lt;- runVarbin( &quot;/mnt/lab/users/dminussi/projects/CopyKit_Manuscript_Code/datasets/BM1/pleural/marked_bams/&quot;, remove_Y = TRUE ) ## Counting reads for genome hg38 and resolution: 220kb ## 33 bam files had less than 10 mean bincounts and were removed. ## Performing GC correction. ## Smoothing bin counts. ## Running segmentation algorithm: CBS for genome hg38 ## Merging levels. ## Done. # Finding diploid and low-quality cells and excluding it from the copykit object bm1_pleural &lt;- findOutliers(bm1_pleural) ## Calculating correlation matrix. ## Marked 106 cells as outliers. ## Adding information to metadata. Access with colData(scCNA). ## Done. bm1_pleural &lt;- findAneuploidCells(bm1_pleural) ## number of iterations= 14 ## Copykit detected 228 that are possibly euploid cells using a resolution of: 0.048 ## Added information to colData(CopyKit). bm1_pleural &lt;- bm1_pleural[, colData(bm1_pleural)$outlier == FALSE] bm1_pleural &lt;- bm1_pleural[, colData(bm1_pleural)$is_aneuploid == TRUE] # Adding the tissue information to colData colData(bm1_pleural)$timepoint &lt;- &#39;pleural&#39; Merging the three datasets # Merging the three copykit objects bm1_merged &lt;- cbind(bm1_breast, bm1_liver, bm1_pleural) From here on the analysis follow the same steps as a standard CopyKit workflow analysis. 3.2 Running UMAP and Clustering bm1_merged &lt;- runUmap(bm1_merged) ## Using assay: logr ## Embedding data with UMAP. Using seed 17 ## Access reduced dimensions slot with: reducedDim(scCNA, &#39;umap&#39;). ## Done. bm1_merged &lt;- findSuggestedK(bm1_merged) ## Calculating jaccard similarity for k range: 10 11 12 13 14 15 16 17 18 19 20 21 ## ## Suggested k = 12 with median jaccard similarity of: 0.99 bm1_merged_suggestedk &lt;- plotSuggestedK(bm1_merged) bm1_merged_suggestedk bm1_merged &lt;- findClusters(bm1_merged) ## Using suggested k_subclones = 12 ## Finding clusters, using method: hdbscan ## Found 4 subclones. ## Done. bm1_merged &lt;- calcConsensus(bm1_merged) bm1_merged &lt;- runConsensusPhylo(bm1_merged) plotHeatmap(bm1_merged, label = c(&#39;subclones&#39;, &#39;timepoint&#39;)) ## Plotting Heatmap. ## The automatically generated colors map from the minus and plus 99^th of the absolute values in the ## matrix. There are outliers in the matrix whose patterns might be hidden by this color mapping. You can ## manually set the color to `col` argument. ## ## Use `suppressMessages()` to turn off this message. bm1_merged_umap_p &lt;- plotUmap(bm1_merged, label = &#39;subclones&#39;) ## Plotting Umap. ## Coloring by: subclones. bm1_merged_umap_p # Cluster c3 from the pleural sample is a cluster of tumor-normal doublets # We can subset out of the CopyKit object in a similar way to the filtering # functions with the information from colData bm1_merged &lt;- bm1_merged[, colData(bm1_merged)$subclones != &#39;c3&#39;] # Re-clustering the sample after doublet removal # This sample has a smaller sample size, therefore we are reducing the # n_neighbors parameter from the UMAP and increasing min_dist bm1_merged &lt;- runUmap(bm1_merged, n_neighbors = 10, min_dist = 0.1) ## Using assay: logr ## Embedding data with UMAP. Using seed 17 ## Access reduced dimensions slot with: reducedDim(scCNA, &#39;umap&#39;). ## Done. # Grid Search of Jaccard Similarity (cluster stability) bm1_merged &lt;- findSuggestedK(bm1_merged) ## Calculating jaccard similarity for k range: 10 11 12 13 14 15 16 17 18 19 20 ## ## Suggested k = 15 with median jaccard similarity of: 0.988 bm1_merged &lt;- findClusters(bm1_merged) ## Using suggested k_subclones = 15 ## Finding clusters, using method: hdbscan ## Found 4 subclones. ## Done. # Plotting the UMAP colored by the tissue of origin from the colData information bm1_merged_tp_umap_p &lt;- plotUmap(bm1_merged, label = &#39;timepoint&#39;) ## Plotting Umap. ## Coloring by: timepoint. bm1_merged_tp_umap_p # Plotting the UMAP colored by the subclones from the colData information bm1_merged_umap_p &lt;- plotUmap(bm1_merged, label = &#39;subclones&#39;) ## Plotting Umap. ## Coloring by: subclones. bm1_merged_umap_p 3.3 Consensus tree To root the tree, we will use an inferred Most Recent Common Ancestral from the primary tumor and provide that as an argument to the runConsensusPhylo function. This consensus tree will be used by plotHeatmap to order the subclones on the plot # The primary sample per se has very few cells so we will add a subclone # information to the colData to use the later inferMrca function in CopyKit colData(bm1_breast)$subclones &lt;- &#39;c1&#39; bm1_breast &lt;- calcConsensus(bm1_breast) # Inferring the MRCA on the primary breast sample bm1_breast &lt;- inferMrca(bm1_breast) # calculating the consensus of the Merged dataset and using the inferred # primary MRCA as the root of the tree bm1_merged &lt;- calcConsensus(bm1_merged) bm1_merged &lt;- runConsensusPhylo(bm1_merged, root = &#39;user&#39;, root_user = metadata(bm1_breast)$inferred_mrca) # Rotating branches consensusPhylo(bm1_merged) &lt;- ape::rotate(consensusPhylo(bm1_merged), 6) bm1_merged_consensus_phylo &lt;- plotPhylo(bm1_merged, label = &#39;subclones&#39;, consensus = TRUE) bm1_merged_consensus_phylo # Calculating cophenetic distances between subclones ape::cophenetic.phylo(consensusPhylo(bm1_merged)) ## c1 c2 c3 c4 ## c1 0.0000 507.340 998.2312 1430.255 ## c2 507.3400 0.000 1284.0087 1716.032 ## c3 998.2312 1284.009 0.0000 1634.176 ## c4 1430.2550 1716.032 1634.1762 0.000 # Plotting the copy number heatmap with annotation data from the subclones and # the tissue of origin plotHeatmap(bm1_merged, label = c(&#39;subclones&#39;, &#39;timepoint&#39;)) ## Plotting Heatmap. # Plotting a consensus heatmap with the plotHeatmap function. # The annotation represents the subclones and relevant cancer genes are marked. plotHeatmap( bm1_merged, label = &#39;subclones&#39;, consensus = TRUE, genes = c( &quot;MYC&quot;, &quot;MYB&quot;, &quot;BRCA1&quot;, &quot;ERBB2&quot;, &quot;CDH1&quot;, &quot;FGFR1&quot;, &quot;AKT2&quot;, &quot;CDK4&quot;, &quot;CCNE1&quot;, &quot;CCND1&quot;, &quot;MTOR&quot;, &quot;FGF10&quot;, &quot;BRAF&quot;, &quot;AURKA&quot; ) ) ## Plotting Heatmap. ## The automatically generated colors map from the minus and plus 99^th of the absolute values in the ## matrix. There are outliers in the matrix whose patterns might be hidden by this color mapping. You can ## manually set the color to `col` argument. ## ## Use `suppressMessages()` to turn off this message. # Using the plotGeneCopy function to plot the segment ratios mean values for # the selected genes and coloring it by the tissue of origin from the metadata bm1_merged_gc &lt;- plotGeneCopy( bm1_merged, genes = c( &quot;MYC&quot;, &quot;MYB&quot;, &quot;BRCA1&quot;, &quot;ERBB2&quot;, &quot;CDH1&quot;, &quot;FGFR1&quot;, &quot;AKT2&quot;, &quot;CDK4&quot;, &quot;CCNE1&quot;, &quot;CCND1&quot;, &quot;MTOR&quot;, &quot;FGF10&quot;, &quot;BRAF&quot;, &quot;AURKA&quot; ), label = &#39;timepoint&#39;, dodge.width = .8 ) + scale_fill_hue() ## Coloring by: timepoint ## Scale for &#39;fill&#39; is already present. Adding another scale for &#39;fill&#39;, which will replace the existing scale. bm1_merged_gc "],["cm1-and-cm2.html", "4 CM1 and CM2 4.1 CM1 4.2 CM1 colon 4.3 CM1 liver 4.4 CM1 merging 4.5 CM2 4.6 CM2 colon 4.7 CM2 liver 4.8 CM2 merging", " 4 CM1 and CM2 4.1 CM1 4.2 CM1 colon # Running data with CopyKit for the primary colon sample cm1_tumor_primary &lt;- runVarbin(&quot;/mnt/lab/users/dminussi/projects/CopyKit_Manuscript_Code/datasets/CM1/colon/marked_bams&quot;, remove_Y = TRUE) ## Counting reads for genome hg38 and resolution: 220kb ## 441 bam files had less than 10 mean bincounts and were removed. ## Performing GC correction. ## Smoothing bin counts. ## Running segmentation algorithm: CBS for genome hg38 ## Merging levels. ## Done. # Finding diploid and low-quality cells and excluding it from the copykit object cm1_tumor_primary &lt;- findOutliers(cm1_tumor_primary) ## Calculating correlation matrix. ## Marked 347 cells as outliers. ## Adding information to metadata. Access with colData(scCNA). ## Done. cm1_tumor_primary &lt;- findAneuploidCells(cm1_tumor_primary) ## number of iterations= 10 ## Copykit detected 35 that are possibly euploid cells using a resolution of: 0.048 ## Added information to colData(CopyKit). cm1_tumor_primary &lt;- cm1_tumor_primary[,colData(cm1_tumor_primary)$outlier == FALSE] cm1_tumor_primary &lt;- cm1_tumor_primary[,colData(cm1_tumor_primary)$is_aneuploid == TRUE] # Adding the tissue information to colData colData(cm1_tumor_primary)$timepoint &lt;- &#39;primary&#39; 4.3 CM1 liver # Running data with CopyKit for the liver sample cm1_tumor_met &lt;- runVarbin( &quot;/mnt/lab/users/dminussi/projects/CopyKit_Manuscript_Code/datasets/CM1/liver/marked_bams&quot;, remove_Y = TRUE ) ## Counting reads for genome hg38 and resolution: 220kb ## 549 bam files had less than 10 mean bincounts and were removed. ## Performing GC correction. ## Smoothing bin counts. ## Running segmentation algorithm: CBS for genome hg38 ## Merging levels. ## Done. # Finding diploid and low-quality cells and excluding it from the copykit object cm1_tumor_met &lt;- findOutliers(cm1_tumor_met) ## Calculating correlation matrix. ## Marked 85 cells as outliers. ## Adding information to metadata. Access with colData(scCNA). ## Done. cm1_tumor_met &lt;- findAneuploidCells(cm1_tumor_met) ## number of iterations= 8 ## Copykit detected 13 that are possibly euploid cells using a resolution of: 0.053 ## Added information to colData(CopyKit). cm1_tumor_met &lt;- cm1_tumor_met[, colData(cm1_tumor_met)$outlier == FALSE] cm1_tumor_met &lt;- cm1_tumor_met[, colData(cm1_tumor_met)$is_aneuploid == TRUE] # Adding the tissue information to colData colData(cm1_tumor_met)$timepoint &lt;- &#39;metastasis&#39; 4.4 CM1 merging # Merging the three copykit objects cm1_merged &lt;- cbind(cm1_tumor_primary, cm1_tumor_met) cm1_merged &lt;- runUmap(cm1_merged) ## Using assay: logr ## Embedding data with UMAP. Using seed 17 ## Access reduced dimensions slot with: reducedDim(scCNA, &#39;umap&#39;). ## Done. cm1_merged &lt;- findSuggestedK(cm1_merged) ## Calculating jaccard similarity for k range: 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 ## ## Suggested k = 44 with median jaccard similarity of: 0.97 cm1_merged_suggestedk &lt;- plotSuggestedK(cm1_merged) cm1_merged_suggestedk cm1_merged &lt;- findClusters(cm1_merged) ## Using suggested k_subclones = 44 ## Finding clusters, using method: hdbscan ## Found 226 outliers cells (group &#39;c0&#39;) ## Found 22 subclones. ## Done. # HDBSCAN is an outlier aware clustering algorithm # in this analysis all cells marked as outliers (c0) from hdbscan are excluded. cm1_merged &lt;- cm1_merged[, colData(cm1_merged)$subclones != &#39;c0&#39;] cm1_merged_tp_umap_p &lt;- plotUmap(cm1_merged, label = &#39;timepoint&#39;) ## Plotting Umap. ## Coloring by: timepoint. cm1_merged_tp_umap_p cm1_merged_umap_p &lt;- plotUmap(cm1_merged, label = &#39;subclones&#39;) ## Plotting Umap. ## Coloring by: subclones. cm1_merged_umap_p cm1_merged &lt;- calcConsensus(cm1_merged) cm1_merged &lt;- runConsensusPhylo(cm1_merged) colData(cm1_merged)$timepoint &lt;- forcats::fct_relevel(colData(cm1_merged)$timepoint, c(&quot;primary&quot;, &quot;metastasis&quot;)) cm1_selected_genes = c( &quot;SMAD3&quot;, &quot;FHIT&quot;, &quot;APC&quot;, &quot;SOX4&quot;, &quot;IGFBP7&quot;, &quot;CDK8&quot;, &quot;PIK3CA&quot;, &quot;MYC&quot;, &#39;TP53&#39;, &quot;GATA4&quot;, &quot;CHEK1&quot;, &quot;TGFB1&quot;, &quot;TIAM1&quot; ) cm1_merged_selected_hvg_gc &lt;- plotGeneCopy(cm1_merged, genes = cm1_selected_genes, label = &#39;timepoint&#39;, dodge.width = .8) + scale_fill_hue(direction = -1) ## Coloring by: timepoint ## Scale for &#39;fill&#39; is already present. Adding another scale for &#39;fill&#39;, which will replace the existing scale. cm1_merged_selected_hvg_gc To root the tree, we will use an inferred Most Recent Common Ancestral from the primary tumor and provide that as an argument to the runConsensusPhylo function. This consensus tree will be used by plotHeatmap to order the subclones on the plot # clustering and inferring the MRCA from the clusters cm1_tumor_primary &lt;- runUmap(cm1_tumor_primary) ## Using assay: logr ## Embedding data with UMAP. Using seed 17 ## Access reduced dimensions slot with: reducedDim(scCNA, &#39;umap&#39;). ## Done. cm1_tumor_primary &lt;- findSuggestedK(cm1_tumor_primary) ## Calculating jaccard similarity for k range: 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 ## ## Suggested k = 37 with median jaccard similarity of: 1 cm1_tumor_primary &lt;- findClusters(cm1_tumor_primary) ## Using suggested k_subclones = 37 ## Finding clusters, using method: hdbscan ## Found 54 outliers cells (group &#39;c0&#39;) ## Found 10 subclones. ## Done. # HDBSCAN is an outlier aware clustering algorithm # in this analysis all cells marked as outliers (c0) from hdbscan are excluded. cm1_tumor_primary &lt;- cm1_tumor_primary[, colData(cm1_tumor_primary)$subclones != &#39;c0&#39;] # calculating the consensus of the Merged dataset and using the inferred # primary MRCA as the root of the tree cm1_tumor_primary &lt;- calcConsensus(cm1_tumor_primary) cm1_tumor_primary &lt;- inferMrca(cm1_tumor_primary) cm1_merged &lt;- runConsensusPhylo( cm1_merged, root = &#39;user&#39;, root_user = metadata(cm1_tumor_primary)$inferred_mrca ) # relevel factors to plot in the desired order colData(cm1_merged)$timepoint &lt;- forcats::fct_relevel(colData(cm1_merged)$timepoint, c(&quot;metastasis&quot;, &quot;primary&quot;)) # plotting the phylogeny with subclones labels and pie charts #indicating the frequency of each timepoint cm1_merged_consensus_phylo &lt;- plotPhylo(cm1_merged, label = &#39;subclones&#39;, consensus = TRUE, group = &#39;timepoint&#39;) cm1_merged_consensus_phylo plotHeatmap(cm1_merged, label = c(&#39;subclones&#39;, &#39;timepoint&#39;)) ## Plotting Heatmap. ## The automatically generated colors map from the minus and plus 99^th of the absolute values in the ## matrix. There are outliers in the matrix whose patterns might be hidden by this color mapping. You can ## manually set the color to `col` argument. ## ## Use `suppressMessages()` to turn off this message. plotHeatmap( cm1_merged, label = c(&#39;subclones&#39;), consensus = TRUE, genes = cm1_selected_genes ) ## Plotting Heatmap. 4.5 CM2 4.6 CM2 colon # Running data with CopyKit for the primary colon sample cm2_tumor_primary &lt;- runVarbin(&quot;/mnt/lab/users/dminussi/projects/CopyKit_Manuscript_Code/datasets/CM2/colon/marked_bams&quot;, remove_Y = TRUE) ## Counting reads for genome hg38 and resolution: 220kb ## 89 bam files had less than 10 mean bincounts and were removed. ## Performing GC correction. ## Smoothing bin counts. ## Running segmentation algorithm: CBS for genome hg38 ## Merging levels. ## Done. # Finding diploid and low-quality cells and excluding it from the copykit object cm2_tumor_primary &lt;- findOutliers(cm2_tumor_primary) ## Calculating correlation matrix. ## Marked 119 cells as outliers. ## Adding information to metadata. Access with colData(scCNA). ## Done. cm2_tumor_primary &lt;- findAneuploidCells(cm2_tumor_primary) ## number of iterations= 8 ## Copykit detected 8 that are possibly euploid cells using a resolution of: 0.051 ## Added information to colData(CopyKit). cm2_tumor_primary &lt;- cm2_tumor_primary[,colData(cm2_tumor_primary)$outlier == FALSE] cm2_tumor_primary &lt;- cm2_tumor_primary[,colData(cm2_tumor_primary)$is_aneuploid == TRUE] # Adding the tissue information to colData colData(cm2_tumor_primary)$timepoint &lt;- &#39;primary&#39; 4.7 CM2 liver # Running data with CopyKit for the liver sample cm2_tumor_met &lt;- runVarbin( &quot;/mnt/lab/users/dminussi/projects/CopyKit_Manuscript_Code/datasets/CM2/liver/marked_bams&quot;, remove_Y = TRUE ) ## Counting reads for genome hg38 and resolution: 220kb ## 149 bam files had less than 10 mean bincounts and were removed. ## Performing GC correction. ## Smoothing bin counts. ## Running segmentation algorithm: CBS for genome hg38 ## Merging levels. ## Done. # Finding diploid and low-quality cells and excluding it from the copykit object cm2_tumor_met &lt;- findOutliers(cm2_tumor_met) ## Calculating correlation matrix. ## Marked 239 cells as outliers. ## Adding information to metadata. Access with colData(scCNA). ## Done. cm2_tumor_met &lt;- findAneuploidCells(cm2_tumor_met) ## number of iterations= 8 ## Copykit detected 6 that are possibly euploid cells using a resolution of: 0.051 ## Added information to colData(CopyKit). cm2_tumor_met &lt;- cm2_tumor_met[, colData(cm2_tumor_met)$outlier == FALSE] cm2_tumor_met &lt;- cm2_tumor_met[, colData(cm2_tumor_met)$is_aneuploid == TRUE] # Adding the tissue information to colData colData(cm2_tumor_met)$timepoint &lt;- &#39;metastasis&#39; 4.8 CM2 merging # Merging the three copykit objects cm2_merged &lt;- cbind(cm2_tumor_primary, cm2_tumor_met) cm2_merged &lt;- runUmap(cm2_merged) ## Using assay: logr ## Embedding data with UMAP. Using seed 17 ## Access reduced dimensions slot with: reducedDim(scCNA, &#39;umap&#39;). ## Done. cm2_merged &lt;- findSuggestedK(cm2_merged) ## Calculating jaccard similarity for k range: 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 ## ## Suggested k = 38 with median jaccard similarity of: 0.922 cm2_merged_suggestedk &lt;- plotSuggestedK(cm2_merged) cm2_merged_suggestedk cm2_merged &lt;- findClusters(cm2_merged) ## Using suggested k_subclones = 38 ## Finding clusters, using method: hdbscan ## Found 70 outliers cells (group &#39;c0&#39;) ## Found 11 subclones. ## Done. # HDBSCAN is an outlier aware clustering algorithm # in this analysis all cells marked as outliers (c0) from hdbscan are excluded. cm2_merged &lt;- cm2_merged[, colData(cm2_merged)$subclones != &#39;c0&#39;] cm2_merged_tp_umap_p &lt;- plotUmap(cm2_merged, label = &#39;timepoint&#39;) ## Plotting Umap. ## Coloring by: timepoint. cm2_merged_tp_umap_p cm2_merged_umap_p &lt;- plotUmap(cm2_merged, label = &#39;subclones&#39;) ## Plotting Umap. ## Coloring by: subclones. cm2_merged_umap_p cm2_merged &lt;- calcConsensus(cm2_merged) cm2_merged &lt;- runConsensusPhylo(cm2_merged) colData(cm2_merged)$timepoint &lt;- forcats::fct_relevel(colData(cm2_merged)$timepoint, c(&quot;primary&quot;, &quot;metastasis&quot;)) cm2_selected_genes = c( &quot;IGF1R&quot;, &quot;SMAD6&quot;, &quot;FGFR2&quot;, &quot;STAT3&quot;, &quot;SOX9&quot;, &quot;KLF5&quot;, &quot;FGF9&quot;, &quot;MSH2&quot;, &quot;APC&quot;, &quot;TP53&quot;, &quot;TNFRSF6B&quot;, &quot;CHEK2&quot;, &quot;MAP3K8&quot; ) cm2_merged_selected_hvg_gc &lt;- plotGeneCopy(cm2_merged, genes = cm2_selected_genes, label = &#39;timepoint&#39;, dodge.width = .8) + scale_fill_hue(direction = -1) ## Coloring by: timepoint ## Warning in find_scaffold_genes(scCNA, genes = genes): Genes: TNFRSF6B are in excluded regions of the Varbin pipeline ## and can&#39;t be plotted. ## Scale for &#39;fill&#39; is already present. Adding another scale for &#39;fill&#39;, which will replace the existing scale. cm2_merged_selected_hvg_gc To root the tree, we will use an inferred Most Recent Common Ancestral from the primary tumor and provide that as an argument to the runConsensusPhylo function. This consensus tree will be used by plotHeatmap to order the subclones on the plot # clustering and inferring the MRCA from the clusters cm2_tumor_primary &lt;- runUmap(cm2_tumor_primary) ## Using assay: logr ## Embedding data with UMAP. Using seed 17 ## Access reduced dimensions slot with: reducedDim(scCNA, &#39;umap&#39;). ## Done. cm2_tumor_primary &lt;- findSuggestedK(cm2_tumor_primary) ## Calculating jaccard similarity for k range: 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ## ## Suggested k = 28 with median jaccard similarity of: 0.944 cm2_tumor_primary &lt;- findClusters(cm2_tumor_primary) ## Using suggested k_subclones = 28 ## Finding clusters, using method: hdbscan ## Found 17 outliers cells (group &#39;c0&#39;) ## Found 8 subclones. ## Done. # HDBSCAN is an outlier aware clustering algorithm # in this analysis all cells marked as outliers (c0) from hdbscan are excluded. cm2_tumor_primary &lt;- cm2_tumor_primary[, colData(cm2_tumor_primary)$subclones != &#39;c0&#39;] # calculating the consensus of the Merged dataset and using the inferred # primary MRCA as the root of the tree cm2_tumor_primary &lt;- calcConsensus(cm2_tumor_primary) cm2_tumor_primary &lt;- inferMrca(cm2_tumor_primary, value = 0.8) cm2_merged &lt;- runConsensusPhylo( cm2_merged, root = &#39;user&#39;, root_user = metadata(cm2_tumor_primary)$inferred_mrca ) consensusPhylo(cm2_merged) &lt;- phytools::rotateNodes(consensusPhylo(cm2_merged), c(14)) # relevel factors to plot in the desired order colData(cm2_merged)$timepoint &lt;- forcats::fct_relevel(colData(cm2_merged)$timepoint, c(&quot;metastasis&quot;, &quot;primary&quot;)) # plotting the phylogeny with subclones labels and pie charts #indicating the frequency of each timepoint cm2_merged_consensus_phylo &lt;- plotPhylo(cm2_merged, label = &#39;subclones&#39;, consensus = TRUE, group = &#39;timepoint&#39;) cm2_merged_consensus_phylo plotHeatmap(cm2_merged, label = c(&#39;subclones&#39;, &#39;timepoint&#39;)) ## Plotting Heatmap. plotHeatmap( cm2_merged, label = c(&#39;subclones&#39;), consensus = TRUE, genes = cm2_selected_genes ) ## Warning in find_scaffold_genes(scCNA, genes): Genes: TNFRSF6B are in excluded regions of the Varbin pipeline and ## can&#39;t be plotted. ## Plotting Heatmap. "],["session-info.html", "5 Session Info", " 5 Session Info sessionInfo() ## R version 4.1.1 (2021-08-10) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.3 LTS ## ## Matrix products: default ## BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] janitor_2.1.0 ggnewscale_0.4.5 ggrepel_0.9.1 forcats_0.5.1 ## [5] stringr_1.4.0 dplyr_1.0.7 purrr_0.3.4 readr_2.0.2 ## [9] tidyr_1.1.4 tibble_3.1.5 ggplot2_3.3.5 tidyverse_1.3.1 ## [13] rstatix_0.7.0 patchwork_1.1.1 copykit_0.0.0.9039 DNAcopy_1.68.0 ## [17] Rsubread_2.8.1 SingleCellExperiment_1.16.0 SummarizedExperiment_1.24.0 Biobase_2.54.0 ## [21] GenomicRanges_1.46.0 GenomeInfoDb_1.30.0 IRanges_2.28.0 S4Vectors_0.32.2 ## [25] BiocGenerics_0.40.0 MatrixGenerics_1.6.0 matrixStats_0.61.0 BiocParallel_1.28.0 ## [29] bookdown_0.24 ## ## loaded via a namespace (and not attached): ## [1] utf8_1.2.2 tidyselect_1.1.1 combinat_0.0-8 grid_4.1.1 ## [5] munsell_0.5.0 aCGH_1.72.0 ScaledMatrix_1.2.0 codetools_0.2-18 ## [9] statmod_1.4.36 scran_1.22.1 miniUI_0.1.1.1 withr_2.4.3 ## [13] colorspace_2.0-2 highr_0.9 knitr_1.36 ggalluvial_0.12.3 ## [17] rstudioapi_0.13 robustbase_0.93-9 labeling_0.4.2 GenomeInfoDbData_1.2.7 ## [21] mnormt_2.0.2 farver_2.1.0 coda_0.19-4 vctrs_0.3.8 ## [25] treeio_1.18.0 generics_0.1.1 clusterGeneration_1.3.7 xfun_0.28 ## [29] fastcluster_1.2.3 diptest_0.76-0 R6_2.5.1 doParallel_1.0.16 ## [33] ggbeeswarm_0.6.0 clue_0.3-60 rsvd_1.0.5 locfit_1.5-9.4 ## [37] pals_1.7 flexmix_2.3-17 bitops_1.0-7 gridGraphics_0.5-1 ## [41] DelayedArray_0.20.0 assertthat_0.2.1 promises_1.2.0.1 scales_1.1.1 ## [45] nnet_7.3-16 beeswarm_0.4.0 gtable_0.3.0 beachmat_2.10.0 ## [49] phangorn_2.7.1 rlang_0.4.12 scatterplot3d_0.3-41 GlobalOptions_0.1.2 ## [53] splines_4.1.1 lazyeval_0.2.2 dichromat_2.0-0 broom_0.7.10 ## [57] yaml_2.2.1 abind_1.4-5 modelr_0.1.8 ggimage_0.3.0 ## [61] backports_1.3.0 httpuv_1.6.3 tools_4.1.1 ggplotify_0.1.0 ## [65] ellipsis_0.3.2 jquerylib_0.1.4 RColorBrewer_1.1-2 Rcpp_1.0.7 ## [69] sparseMatrixStats_1.6.0 zlibbioc_1.40.0 RCurl_1.98-1.5 dbscan_1.1-10 ## [73] GetoptLong_1.0.5 viridis_0.6.2 cowplot_1.1.1 haven_2.4.3 ## [77] cluster_2.1.2 fs_1.5.0 magrittr_2.0.1 RSpectra_0.16-0 ## [81] magick_2.7.3 circlize_0.4.13 reprex_2.0.1 tmvnsim_1.0-2 ## [85] amap_0.8-18 hms_1.1.1 mime_0.12 evaluate_0.14 ## [89] xtable_1.8-4 mclust_5.4.7 readxl_1.3.1 gridExtra_2.3 ## [93] shape_1.4.6 compiler_4.1.1 maps_3.4.0 crayon_1.4.2 ## [97] htmltools_0.5.2 segmented_1.3-4 ggfun_0.0.4 later_1.3.0 ## [101] tzdb_0.2.0 aplot_0.1.1 expm_0.999-6 lubridate_1.8.0 ## [105] DBI_1.1.1 dbplyr_2.1.1 ComplexHeatmap_2.10.0 MASS_7.3-54 ## [109] fpc_2.2-9 boot_1.3-28 Matrix_1.3-4 car_3.0-12 ## [113] cli_3.1.0 quadprog_1.5-8 parallel_4.1.1 metapod_1.2.0 ## [117] igraph_1.2.8 pkgconfig_2.0.3 numDeriv_2016.8-1.1 scuttle_1.4.0 ## [121] xml2_1.3.2 foreach_1.5.1 ggtree_3.2.0 vipor_0.4.5 ## [125] bslib_0.3.1 dqrng_0.3.0 multtest_2.50.0 XVector_0.34.0 ## [129] rvest_1.0.2 snakecase_0.11.0 yulab.utils_0.0.4 digest_0.6.28 ## [133] phytools_0.7-90 fastmatch_1.1-3 cellranger_1.1.0 rmarkdown_2.11 ## [137] tidytree_0.3.5 uwot_0.1.10 edgeR_3.36.0 DelayedMatrixStats_1.16.0 ## [141] kernlab_0.9-29 shiny_1.7.1 gtools_3.9.2 modeltools_0.2-23 ## [145] rjson_0.2.20 lifecycle_1.0.1 nlme_3.1-153 jsonlite_1.7.2 ## [149] carData_3.0-4 BiocNeighbors_1.12.0 mapproj_1.2.7 viridisLite_0.4.0 ## [153] limma_3.50.0 fansi_0.5.0 pillar_1.6.4 lattice_0.20-45 ## [157] plotrix_3.8-2 fastmap_1.1.0 httr_1.4.2 DEoptimR_1.0-9 ## [161] survival_3.2-13 glue_1.4.2 FNN_1.1.3 png_0.1-7 ## [165] prabclus_2.3-2 iterators_1.0.13 bluster_1.4.0 class_7.3-19 ## [169] stringi_1.7.5 sass_0.4.0 mixtools_1.2.0 BiocSingular_1.10.0 ## [173] irlba_2.3.3 ape_5.5 "],["copykit-paper.html", "6 CopyKit Paper 6.1 Manuscript Code 6.2 CopyKit installation 6.3 Documentation 6.4 Datasets", " 6 CopyKit Paper This repository contains the scripts to reproduce the figures for the CopyKit manuscript. Resolving clonal substructure from single cell genomic data using CopyKit 6.1 Manuscript Code Code to reproduce figures from the manuscript can be found here: https://navinlabcode.github.io/CopyKit_paper/ 6.2 CopyKit installation You can install the development version of CopyKit from github with: devtools::install_github(&quot;navinlabcode/copykit&quot;) Please check CopyKit package GitHub repository as well: https://github.com/navinlabcode/copykit 6.3 Documentation CopyKit complete documentation can be found here: https://navinlabcode.github.io/CopyKit-UserGuide/ 6.4 Datasets Files used for this project are deposited to the sequence read archive (SRA) under BioProject PRJNA785341. "]]
